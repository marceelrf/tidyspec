% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spec_join.R
\name{spec_join}
\alias{spec_join}
\title{Join multiple spectral tibbles}
\usage{
spec_join(..., wn_col = NULL, join_type = "full", suffix = c(".x", ".y"))
}
\arguments{
\item{...}{Two or more tibbles containing spectral data}

\item{wn_col}{Character string specifying the wavenumber column name.
If NULL, uses the globally set wavenumber column from `set_spec_wn()`.}

\item{join_type}{Character string specifying the type of join operation.
Options: "full" (default), "inner", "left". See Details.}

\item{suffix}{Character vector of length 2 specifying suffixes to add
to non-wavenumber columns when there are naming conflicts.
Default: c(".x", ".y")}
}
\value{
A tibble containing the joined spectral data
}
\description{
`spec_join()` combines two or more spectral tibbles that share the same
wavenumber column. The function performs a full join operation, keeping
all wavenumber values from all input tibbles.
}
\details{
Join types:
- "full": Keep all wavenumber values from all tibbles (default)
- "inner": Keep only wavenumber values present in all tibbles
- "left": Keep wavenumber values from the first tibble

The function will show warnings about the wavenumber column being used
(similar to other tidyspec functions) and will handle missing values
appropriately.
}
\examples{
\dontrun{
# Set wavenumber column
set_spec_wn("Wavenumber")

# Join two spectral datasets
joined_data <- spec_join(CoHAspec, other_spec_data)

# Join multiple datasets with inner join
joined_data <- spec_join(spec1, spec2, spec3, join_type = "inner")

# Specify wavenumber column explicitly
joined_data <- spec_join(spec1, spec2, wn_col = "Wavenumber")
}

}
